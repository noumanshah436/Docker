
Topics:

Links
Check docker installation
docker pull
docker images
docker ps
docker run
docker exec 
Restart container
Remove container
Remove image
Remove all stopped containers
Environment Variabel in mysql container
Exposing Port 
Debugging container
Docker Volume
    Share data between host and container (Bind Mount)
    Share data between multiple containers (Volume Mount)
    Volume with Dockerfile


======================================================================================
Links:


https://docs.docker.com/reference/cli/docker/image/ls/

*************************

https://www.youtube.com/watch?v=Qn08jgrsRY4&list=PLbGui_ZYuhihMb5pqut64GhW-WhxKpygY&index=5&t=2448s

2:00:00

======================================================================================

Check docker installation:

docker run hello-world

or

sudo docker run hello-world


======================================================================================

docker pull:


Pulls the docker image from repositior to local environment
$ docker pull python

Pull docker image with specific tag:
$ docker pull python:3.9-slim


docker pull images in layers so that if we want to pull any other image, 
it will then only pull layers that are not downloaded before.

Docker optimizes image downloads by pulling layers individually. 
If you pull a new image that shares some layers with previously downloaded images, Docker only pulls the layers that aren't already available locally. 
This is a significant advantage because it reduces bandwidth usage and speeds up the download process.

======================================================================================

docker images:
show all images 

$ docker images
REPOSITORY    TAG        IMAGE ID       CREATED         SIZE
python        3.9-slim   d8892906392f   2 weeks ago     125MB

======================================================================================

docker ps:

$ docker ps
list running containers

$ docker ps -a  
lists both running and stopped container

CONTAINER ID   IMAGE             COMMAND     CREATED       STATUS                   PORTS     NAMES
38c732292291   python:3.9-slim   "python3"   2 hours ago   Exited (0) 2 hours ago             python-c1
973a3e5ef556   hello-world       "/hello"    2 hours ago   Exited (0) 2 hours ago             lucid_agnesi


======================================================================================

docker run:

$ docker run hello-world
pull and starts new container

******************************

$ docker run --name python-c1 python:3.9-slim 

this will run `python:3.9-slim` image with the given name `python-c1`

******************************

$ docker run --name python-c2 -d python:3.9-slim 

-d flag = Run container in background and print container ID

Note: we can't create two containers with same name

******************************


$ docker run --name python-c3 -it python:3.9-slim 

Python 3.9.19 (main, Aug 13 2024, 01:15:04) 
[GCC 12.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> print("Hello world")
Hello world
>>> exit()

-it = run in interactive terminal mode


******************************

$ docker run --name python-c2 -it -d python:3.9-slim 

-it = run in interactive terminal mode

$ docker ps -a

CONTAINER ID   IMAGE             COMMAND     CREATED         STATUS                   PORTS     NAMES
ba2b3f1f744c   python:3.9-slim   "python3"   3 seconds ago   Up 2 seconds                       python-c2

******************************

$ docker run --name python-c5 -it --rm python:3.9-slim 

--rm = Automatically remove the container and its associated anonymous volumes when it exits

======================================================================================

docker exec:

Description:  Execute a command in a running container ( can only used with containers that are running )
Usage:	      docker container exec [OPTIONS] CONTAINER COMMAND [ARG...]

$ docker ps -a

CONTAINER ID   IMAGE             COMMAND     CREATED          STATUS                      PORTS     NAMES
ba2b3f1f744c   python:3.9-slim   "python3"   37 minutes ago   Up 4 minutes                          python-c2

$ docker exec -it python-c2 python

Python 3.9.19 (main, Aug 13 2024, 01:15:04) 
[GCC 12.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> print("Hello World!")
Hello World!

**************************

The below command opens an interactive Bash shell inside the running python-c1 container, 
allowing you to interact with the container as if you were inside its terminal.

We can check the virtual file system or configurations of the running container

$ docker exec -it python-c1 bin/bash

root@e9dfefa45be0:/# ls
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var

root@e9dfefa45be0:/# python --version
Python 3.12.5

======================================================================================

docker inspect:

Description:	Return low-level information on Docker objects
Usage:      	docker inspect [OPTIONS] NAME|ID [NAME|ID...]

$ docker inspect python-c2

[
    {
        "Id": "ba2b3f1f744ca7de31e9d24e10fe85556ada5ca0d5d1533ab409a8d362c496e5",
        "Created": "2024-08-17T17:12:28.781970927Z",
        "Path": "python3",      
        "Config": {
            "Hostname": "ba2b3f1f744c",
            "Env": [],
            "Cmd": [
                "python3"
            ]
        },
        "NetworkSettings": {
            ...
        }
    }
]

======================================================================================

Restart container:

docker stop <id_of_container>                ---- we can also use name of the container
docker start <id_of_container>
docker restart <id_of_container>

$ docker ps
CONTAINER ID   IMAGE             COMMAND     CREATED          STATUS          PORTS     NAMES
ba2b3f1f744c   python:3.9-slim   "python3"   29 minutes ago   Up 29 minutes             python-c2

$ docker stop python-c2
python-c2

$ docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES

$ docker start python-c2

======================================================================================

Remove container:

docker rm:

Remove container (stop the container before removing or force remove)

$ docker rm python-c1

$ docker rm python-c2 -f
force remove a running container


======================================================================================

Remove image: (docker rmi)

$ docker images
REPOSITORY    TAG        IMAGE ID       CREATED         SIZE
python        3.9-slim   d8892906392f   2 weeks ago     125MB
hello-world   latest     d2c94e258dcb   15 months ago   13.3kB


$ docker rmi hello-world
Error response from daemon: conflict: unable to remove repository reference "hello-world" (must force) - container 973a3e5ef556 is using its referenced image d2c94e258dcb

To remove an image, we first need to remove all the containers of that image.

**********************

$ docker rmi python
or
$ docker rmi d8892906392f


======================================================================================

Remove all stopped containers

$ docker container prune

WARNING! This will remove all stopped containers.
Are you sure you want to continue? [y/N] y

======================================================================================

Environment Variabel in mysql container:

https://hub.docker.com/_/mysql

$ docker pull mysql

**********************

$ docker images

REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
mysql        latest    7ce93a845a8a   3 weeks ago   586MB

**********************

Run mysql image with the name `mysql-c1` with environment variable MYSQL_ROOT_PASSWORD in detached mode:

$ docker run --name mysql-c1 -e MYSQL_ROOT_PASSWORD=nouman -d mysql

22ac342747123211ac1d3c3804a6834a41df96ee17598ed50dcfb1df2a73b75b

$ docker ps -a

CONTAINER ID   IMAGE     COMMAND                  CREATED              STATUS              PORTS                 NAMES
22ac34274712   mysql     "docker-entrypoint.sâ€¦"   About a minute ago   Up About a minute   3306/tcp, 33060/tcp   mysql-c1

**********************

Execute command `mysql -u root -p` in the container `mysql-c1`: 

$ docker exec -it mysql-c1 mysql -u root -p

Enter password: nouman
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 8
Server version: 9.0.1 MySQL Community Server - GPL

Copyright (c) 2000, 2024, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> show databases;

**********************

$ docker stop mysql-c1

**********************

We can also start mysql shell like this:

$ docker start mysql-c1 
mysql-c1

$ docker exec -it mysql-c1 /bin/bash

bash-5.1# mysql -u root -p
Enter password: nouman 

Welcome to the MySQL monitor.  Commands end with ; or \g.

mysql> 

======================================================================================
https://docs.docker.com/guides/docker-concepts/running-containers/publishing-ports/

Exposing Port ( Binding container and host )

Usage: docker run -p host_port:container_port -d image_name


$ docker run -p 6000:6379 -d redis

It connects my localhost(my-system) port 6000  to the  port 6379 inside my container.
This means that when we hit 6000 port on host, then it will hit on port 6379 of the container.

**********************************

We can also attach another redis container:

$ docker run -p 6001:6379 -d redis:4.0

Container can run on same port but we should have host bingding port different.

**********************************

HOST_PORT: The port number on your host machine where you want to receive traffic
CONTAINER_PORT: The port number within the container that's listening for connections

**********************************

Run apache and nginx both:

$ docker run --name nginx-c1 -p 8080:80 -d nginx

$ docker run --name apache-c1 -p 8000:80 -d httpd:alpine

======================================================================================

Debugging container

1)
$ docker logs <id_of_container>
$ docker logs <id_of_container> | tail       -- to see last part of logs only
$ docker logs <id_of_container> -f           -- now you can string the logs ( add line manualy to separate )

2) create a new container with given name

docker run -d -p 6001:6379 --name redis-older redis:4.0
docker run -d -p 6000:6379 --name redis-latest redis

docker logs redis-older

======================================================================================
Docker Volume
======================================================================================

### What is Docker Volume
- Docker Volume is a feature provided by Docker that allows you to manage persistent data in Docker containers.
- Containers run in an isolated environment with their own file system.
- Data stored within a container is typically non-persistent and is lost when the container is stopped or removed.
- Docker Volumes allow for persistent storage that can be shared between containers or between a container and the host system.
- Volumes ensure that data persists even if the container is stopped or deleted.

### What is Docker Volume (Continued)
- A Docker Volume is a directory or mount point outside the container's file system, mapped to a specific path within the container.
- This mapping enables the container to read from or write to the volume as if it were a regular directory.
- Docker volumes are created separately from the container and can be mounted to one or more containers.
- They are independent and can be associated with one or more containers.

### Advantages of Docker Volume
- Easier to back up or migrate than bind mounts.
- Managed using Docker CLI commands or the Docker API.
- Compatible with both Linux and Windows containers.
- Can be safely shared among multiple containers.
- Volume drivers allow storing volumes on remote hosts or cloud providers, encrypting contents, or adding functionality.
- New volumes can have their content pre-populated by a container.
- Volumes on Docker Desktop have higher performance than bind mounts from Mac and Windows hosts.

### Docker Volume Commands
- `docker volume create volume_name`                                            ->  Creates a volume.
- `docker volume ls`                                                            ->  Lists volumes.
- `docker volume inspect volume_name`                                           ->  Inspects a volume.
- `docker volume rm volume_name`                                                ->  Removes a volume.
- `docker volume prune`                                                         ->  Removes all volumes.
- `docker run -d --name container_name -v volume_name:/app nginx`               ->  Starts a container and creates a volume if it doesn't exist.
- `docker run -d --name container_name -v volume_name:/app:ro nginx`            ->  Starts a container and creates a read-only volume if it doesn't exist.

********************************************************************
### Share data between host and container (Bind Mount)
********************************************************************

(Mount host directory to the container directory)

We can share data between host to container without creating docker volume by directly mounting host directory to container directory.


$ cd my-site
$ docker run --name python-c1 -it -d -v /home/dev/Docker/full-course/docker-volume/my-site:/my-app python

This will mount our local `/home/dev/Docker/full-course/docker-volume/my-site` directory to `/my-app` directory inside the container 
(it will create /my-app directory inside the container and mount with our local dir)

$ docker exec -it python-c1 bash

# ls
bin  boot  dev  etc  home  lib  lib64  media  mnt  my-app  opt  proc  root  run  sbin  srv  sys  tmp  usr  var

# cd my-app/

# ls
hello.py

# python hello.py 
Hello world!

********************************************************************
### Share data between multiple containers (Volume Mount)
********************************************************************

To share a vlume between two docker containers, you can create a docker volume and the mount it to both containers

Create volume then mount to container:

$ docker volume create myvolume
$ docker run --name c1 -itd -v myvolume:/myapp python
$ docker run --name c2 -itd -v myvolume:/myapp python

This creates a Docker volume (myvolume) and then mounts it to the /myapp directory in two separate containers (c1 and c2), 
allowing both containers to share data via the same volume.

If we now interact(using below command)s with both the containers in a separate terminal, we will see a myapp folder inside both containers and any change in that folder will reflect on both the containers.

$ docker exec -it c1 /bin/bash
$ docker exec -it c2 /bin/bash

Removing the container will not remove the volume data, we can mount new container with that volume.

********************************************************************
### Volume with Dockerfile:
********************************************************************

To use a volume with a Dockerfile, you can define the `VOLUME` instruction within the Dockerfile. 
This instruction creates a mount point with a specified path inside the container that can later be mapped to a volume.

Here's a simple example:

### docker-volume/volume-with-dockerfile/Dockerfile

```
# Use a base image
FROM ubuntu

# Define a volume
VOLUME ["/nouman-data"]
```

### Explanation:

- VOLUME ["/nouman-data"]

This defines `/nouman-data` as a mount point that can be backed by a Docker volume. 
When you run the container, you can map this to a Docker-managed volume or a specific host directory.

### Running the Docker Container with a Volume:

After building the Docker image using the Dockerfile, you can run multiple container and map a volume to the defined path.
If the volume `myvolume` does not already exist, Docker will automatically create it when you run the command.

$ cd "docker-volume/volume-with-dockerfile"
$ docker build -t my-image .
$ docker run --name my-container-1 -itd -v myvolume:/nouman-data my-image /bin/bash
$ docker run --name my-container-2 -itd -v myvolume:/nouman-data my-image /bin/bash

Check volume:
$ docker exec -it my-container-1 bash                          -- go to nouman-data and create some file or folder
$ docker exec -it my-container-2 bash                          -- here in the nouman-data folder, you will find the above created file or folder

In this example:
- `myvolume:/nouman-data`: Maps the `myvolume` Docker volume to the `/nouman-data` directory inside the container.

======================================================================================


======================================================================================


======================================================================================


======================================================================================

======================================================================================


======================================================================================


======================================================================================


======================================================================================


======================================================================================

======================================================================================


======================================================================================


======================================================================================


======================================================================================


======================================================================================

======================================================================================


======================================================================================


======================================================================================


======================================================================================


======================================================================================

======================================================================================


======================================================================================


======================================================================================


======================================================================================


======================================================================================

======================================================================================


======================================================================================


======================================================================================


======================================================================================


======================================================================================


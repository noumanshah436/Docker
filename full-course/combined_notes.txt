
Topics:

Links
Check docker installation
docker pull
docker images
docker ps
docker run
docker exec 
Restart container
Remove container
Remove image
Remove all stopped containers
Environment Variabel in mysql container
Exposing Port 
Debugging container
Docker Volume
    Share data between host and container (Bind Mount)
    Share data between multiple containers (Volume Mount)
    Volume with Dockerfile
Docker Networking
Docker Compose

======================================================================================
Links:


https://docs.docker.com/reference/cli/docker/image/ls/

*************************

https://www.youtube.com/watch?v=Qn08jgrsRY4&list=PLbGui_ZYuhihMb5pqut64GhW-WhxKpygY&index=5&t=2448s

2:00:00

======================================================================================

Check docker installation:

docker run hello-world

or

sudo docker run hello-world


======================================================================================

docker pull:


Pulls the docker image from repositior to local environment
$ docker pull python

Pull docker image with specific tag:
$ docker pull python:3.9-slim


docker pull images in layers so that if we want to pull any other image, 
it will then only pull layers that are not downloaded before.

Docker optimizes image downloads by pulling layers individually. 
If you pull a new image that shares some layers with previously downloaded images, Docker only pulls the layers that aren't already available locally. 
This is a significant advantage because it reduces bandwidth usage and speeds up the download process.

======================================================================================

docker images:
show all images 

$ docker images
REPOSITORY    TAG        IMAGE ID       CREATED         SIZE
python        3.9-slim   d8892906392f   2 weeks ago     125MB

======================================================================================

docker ps:

$ docker ps
list running containers

$ docker ps -a  
lists both running and stopped container

CONTAINER ID   IMAGE             COMMAND     CREATED       STATUS                   PORTS     NAMES
38c732292291   python:3.9-slim   "python3"   2 hours ago   Exited (0) 2 hours ago             python-c1
973a3e5ef556   hello-world       "/hello"    2 hours ago   Exited (0) 2 hours ago             lucid_agnesi


======================================================================================

docker run:

$ docker run hello-world
pull and starts new container

******************************

$ docker run --name python-c1 python:3.9-slim 

this will run `python:3.9-slim` image with the given name `python-c1`

******************************

$ docker run --name python-c2 -d python:3.9-slim 

-d flag = Run container in background and print container ID

Note: we can't create two containers with same name

******************************


$ docker run --name python-c3 -it python:3.9-slim 

Python 3.9.19 (main, Aug 13 2024, 01:15:04) 
[GCC 12.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> print("Hello world")
Hello world
>>> exit()

-it = run in interactive terminal mode


******************************

$ docker run --name python-c2 -it -d python:3.9-slim 

-it = run in interactive terminal mode

$ docker ps -a

CONTAINER ID   IMAGE             COMMAND     CREATED         STATUS                   PORTS     NAMES
ba2b3f1f744c   python:3.9-slim   "python3"   3 seconds ago   Up 2 seconds                       python-c2

******************************

$ docker run --name python-c5 -it --rm python:3.9-slim 

--rm = Automatically remove the container and its associated anonymous volumes when it exits

======================================================================================

docker exec:

Description:  Execute a command in a running container ( can only used with containers that are running )
Usage:	      docker container exec [OPTIONS] CONTAINER COMMAND [ARG...]

$ docker ps -a

CONTAINER ID   IMAGE             COMMAND     CREATED          STATUS                      PORTS     NAMES
ba2b3f1f744c   python:3.9-slim   "python3"   37 minutes ago   Up 4 minutes                          python-c2

$ docker exec -it python-c2 python

Python 3.9.19 (main, Aug 13 2024, 01:15:04) 
[GCC 12.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> print("Hello World!")
Hello World!

**************************

The below command opens an interactive Bash shell inside the running python-c1 container, 
allowing you to interact with the container as if you were inside its terminal.

We can check the virtual file system or configurations of the running container

$ docker exec -it python-c1 bin/bash

root@e9dfefa45be0:/# ls
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var

root@e9dfefa45be0:/# python --version
Python 3.12.5

======================================================================================

docker inspect:

Description:	Return low-level information on Docker objects
Usage:      	docker inspect [OPTIONS] NAME|ID [NAME|ID...]

$ docker inspect python-c2

[
    {
        "Id": "ba2b3f1f744ca7de31e9d24e10fe85556ada5ca0d5d1533ab409a8d362c496e5",
        "Created": "2024-08-17T17:12:28.781970927Z",
        "Path": "python3",      
        "Config": {
            "Hostname": "ba2b3f1f744c",
            "Env": [],
            "Cmd": [
                "python3"
            ]
        },
        "NetworkSettings": {
            ...
        }
    }
]

======================================================================================

Restart container:

docker stop <id_of_container or list-of-ids>                ---- we can also use name of the container
docker start <id_of_container>
docker restart <id_of_container>

$ docker ps
CONTAINER ID   IMAGE             COMMAND     CREATED          STATUS          PORTS     NAMES
ba2b3f1f744c   python:3.9-slim   "python3"   29 minutes ago   Up 29 minutes             python-c2

$ docker stop python-c2
python-c2

$ docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES

$ docker start python-c2

We can also use:
docker container stop <id_of_container>
docker container start <id_of_container>
docker container restart <id_of_container>


docker stop c1 c2 c3 c4


======================================================================================

Remove container:

docker rm:

Remove container (stop the container before removing or force remove)

$ docker rm python-c1

$ docker rm python-c2 -f
force remove a running container


======================================================================================

Remove image: (docker rmi)

$ docker images
REPOSITORY    TAG        IMAGE ID       CREATED         SIZE
python        3.9-slim   d8892906392f   2 weeks ago     125MB
hello-world   latest     d2c94e258dcb   15 months ago   13.3kB


$ docker rmi hello-world
Error response from daemon: conflict: unable to remove repository reference "hello-world" (must force) - container 973a3e5ef556 is using its referenced image d2c94e258dcb

To remove an image, we first need to remove all the containers of that image.

**********************

$ docker rmi python
or
$ docker rmi d8892906392f


======================================================================================

Remove all stopped containers

$ docker container prune

WARNING! This will remove all stopped containers.
Are you sure you want to continue? [y/N] y

======================================================================================

Environment Variabel in mysql container:

https://hub.docker.com/_/mysql

$ docker pull mysql

**********************

$ docker images

REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
mysql        latest    7ce93a845a8a   3 weeks ago   586MB

**********************

Run mysql image with the name `mysql-c1` with environment variable MYSQL_ROOT_PASSWORD in detached mode:

$ docker run --name mysql-c1 -e MYSQL_ROOT_PASSWORD=nouman -d mysql

22ac342747123211ac1d3c3804a6834a41df96ee17598ed50dcfb1df2a73b75b

$ docker ps -a

CONTAINER ID   IMAGE     COMMAND                  CREATED              STATUS              PORTS                 NAMES
22ac34274712   mysql     "docker-entrypoint.sâ€¦"   About a minute ago   Up About a minute   3306/tcp, 33060/tcp   mysql-c1

**********************

Execute command `mysql -u root -p` in the container `mysql-c1`: 

$ docker exec -it mysql-c1 mysql -u root -p

Enter password: nouman
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 8
Server version: 9.0.1 MySQL Community Server - GPL

Copyright (c) 2000, 2024, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> show databases;

**********************

$ docker stop mysql-c1

**********************

We can also start mysql shell like this:

$ docker start mysql-c1 
mysql-c1

$ docker exec -it mysql-c1 /bin/bash

bash-5.1# mysql -u root -p
Enter password: nouman 

Welcome to the MySQL monitor.  Commands end with ; or \g.

mysql> 

======================================================================================
https://docs.docker.com/guides/docker-concepts/running-containers/publishing-ports/

Exposing Port ( Binding container and host )

Usage: docker run -p host_port:container_port -d image_name


$ docker run -p 6000:6379 -d redis

It connects my localhost(my-system) port 6000  to the  port 6379 inside my container.
This means that when we hit 6000 port on host, then it will hit on port 6379 of the container.

**********************************

We can also attach another redis container:

$ docker run -p 6001:6379 -d redis:4.0

Container can run on same port but we should have host bingding port different.

**********************************

HOST_PORT: The port number on your host machine where you want to receive traffic
CONTAINER_PORT: The port number within the container that's listening for connections

**********************************

Run apache and nginx both:

$ docker run --name nginx-c1 -p 8080:80 -d nginx

$ docker run --name apache-c1 -p 8000:80 -d httpd:alpine

======================================================================================

Debugging container

1)
$ docker logs <id_of_container>
$ docker logs <id_of_container> | tail       -- to see last part of logs only
$ docker logs <id_of_container> -f           -- now you can string the logs ( add line manualy to separate )

2) create a new container with given name

docker run -d -p 6001:6379 --name redis-older redis:4.0
docker run -d -p 6000:6379 --name redis-latest redis

docker logs redis-older

======================================================================================
Docker Volume
======================================================================================

### What is Docker Volume
- Docker Volume is a feature provided by Docker that allows you to manage persistent data in Docker containers.
- Containers run in an isolated environment with their own file system.
- Data stored within a container is typically non-persistent and is lost when the container is stopped or removed.
- Docker Volumes allow for persistent storage that can be shared between containers or between a container and the host system.
- Volumes ensure that data persists even if the container is stopped or deleted.

### What is Docker Volume (Continued)
- A Docker Volume is a directory or mount point outside the container's file system, mapped to a specific path within the container.
- This mapping enables the container to read from or write to the volume as if it were a regular directory.
- Docker volumes are created separately from the container and can be mounted to one or more containers.
- They are independent and can be associated with one or more containers.

### Advantages of Docker Volume
- Easier to back up or migrate than bind mounts.
- Managed using Docker CLI commands or the Docker API.
- Compatible with both Linux and Windows containers.
- Can be safely shared among multiple containers.
- Volume drivers allow storing volumes on remote hosts or cloud providers, encrypting contents, or adding functionality.
- New volumes can have their content pre-populated by a container.
- Volumes on Docker Desktop have higher performance than bind mounts from Mac and Windows hosts.

### Docker Volume Commands
- `docker volume create volume_name`                                            ->  Creates a volume.
- `docker volume ls`                                                            ->  Lists volumes.
- `docker volume inspect volume_name`                                           ->  Inspects a volume.
- `docker volume rm volume_name`                                                ->  Removes a volume.
- `docker volume prune`                                                         ->  Removes all volumes.
- `docker run -d --name container_name -v volume_name:/app nginx`               ->  Starts a container and creates a volume if it doesn't exist.
- `docker run -d --name container_name -v volume_name:/app:ro nginx`            ->  Starts a container and creates a read-only volume if it doesn't exist.

********************************************************************
### Share data between host and container (Bind Mount)
********************************************************************

(Mount host directory to the container directory)

We can share data between host to container without creating docker volume by directly mounting host directory to container directory.


$ cd my-site
$ docker run --name python-c1 -it -d -v /home/dev/Docker/full-course/docker-volume/my-site:/my-app python

This will mount our local `/home/dev/Docker/full-course/docker-volume/my-site` directory to `/my-app` directory inside the container 
(it will create /my-app directory inside the container and mount with our local dir)

$ docker exec -it python-c1 bash

# ls
bin  boot  dev  etc  home  lib  lib64  media  mnt  my-app  opt  proc  root  run  sbin  srv  sys  tmp  usr  var

# cd my-app/

# ls
hello.py

# python hello.py 
Hello world!

********************************************************************
### Share data between multiple containers (Volume Mount)
********************************************************************

To share a vlume between two docker containers, you can create a docker volume and the mount it to both containers

Create volume then mount to container:

$ docker volume create myvolume
$ docker run --name c1 -itd -v myvolume:/myapp python
$ docker run --name c2 -itd -v myvolume:/myapp python

This creates a Docker volume (myvolume) and then mounts it to the /myapp directory in two separate containers (c1 and c2), 
allowing both containers to share data via the same volume.

If we now interact(using below command)s with both the containers in a separate terminal, we will see a myapp folder inside both containers and any change in that folder will reflect on both the containers.

$ docker exec -it c1 /bin/bash
$ docker exec -it c2 /bin/bash

Removing the container will not remove the volume data, we can mount new container with that volume.

********************************************************************
### Volume with Dockerfile:
********************************************************************

To use a volume with a Dockerfile, you can define the `VOLUME` instruction within the Dockerfile. 
This instruction creates a mount point with a specified path inside the container that can later be mapped to a volume.

Here's a simple example:

### docker-volume/volume-with-dockerfile/Dockerfile

```
# Use a base image
FROM ubuntu

# Define a volume
VOLUME ["/nouman-data"]
```

### Explanation:

- VOLUME ["/nouman-data"]

This defines `/nouman-data` as a mount point that can be backed by a Docker volume. 
When you run the container, you can map this to a Docker-managed volume or a specific host directory.

### Running the Docker Container with a Volume:

After building the Docker image using the Dockerfile, you can run multiple container and map a volume to the defined path.
If the volume `myvolume` does not already exist, Docker will automatically create it when you run the command.

$ cd "docker-volume/volume-with-dockerfile"
$ docker build -t my-image .
$ docker run --name my-container-1 -itd -v myvolume:/nouman-data my-image /bin/bash
$ docker run --name my-container-2 -itd -v myvolume:/nouman-data my-image /bin/bash

Check volume:
$ docker exec -it my-container-1 bash                          -- go to nouman-data and create some file or folder
$ docker exec -it my-container-2 bash                          -- here in the nouman-data folder, you will find the above created file or folder

In this example:
- `myvolume:/nouman-data`: Maps the `myvolume` Docker volume to the `/nouman-data` directory inside the container.

======================================================================================
Docker Networking
======================================================================================


What is Docker Networking

Docker networking is a fundamental aspect of Docker that enables communication between Docker containers and external networks. It allows you to connect containers together, as well as connect containers to the host machine and other external resources.
A container has no information about what kind of network it's attached to, or whether their peers are also Docker workloads or not.
A container only sees a network interface with an IP address, a gateway, a routing table, DNS services, and other networking details.
By default, when you create or run a container using docker create or docker run, the container doesn't expose any of its ports to the outside world.
Use the --publish or -p flag to make a port available to services outside of Docke This creates a firewall rule in the host, mapping a container port to a port on the Docker host to the outside world.

*****************************************

Network Drivers:

bridge:
The default bridge network is good for running containers that don't require special networking capabilities. 
User-defined bridge networks enable containers on the same Docker host to communicate with each other. 
A user-defined network typically defines an isolated network for multiple containers belonging to a common project or component.

host:
Host network shares the host's network with the container. 
When you use this driver, the container's network isn't isolated from the host.

overlay:
Overlay networks are best when you need containers running on different Docker hosts to communicate, or when multiple applications work together using Swarm services.

macvlan:
Macvlan networks are best when you are migrating from a VM setu or need your containers to look like physical hosts on your network, each with unique MAC address.

ipvlan:
IPvlan is similar to Macvlan, but doesn't assign unique MAC addresses to containers. Consider using IPvlan when there's a restriction on the number of MAC addresses that can be assigned to a network interface or port.

none:
No Networking

Network plugins


*****************************************

Bridge Network Drivers:

In terms of Docker, a bridge network uses a software bridge which allows containers connected to the same bridge network to communicate, while providing isolation from containers which are not connected to that bridge network.
The Docker bridge driver automatically installs rules in the host machine so that containers on different bridge networks cannot communicate directly with each other.
Bridge networks apply to containers running on the same Docker daemon host.
When you start Docker, a default bridge network (also called bridge) is created automatically, and newly-started containers connect to it unless otherwise specified



Default Bridge Network: 

Containers can communicate to each other 
Container and Host can communicate via bridge 
Containers can only communicate by IP address, not by container name.


User-defined Bridge Network:

Possible to achieve isolation of container.
C1 and C2 can communicate to each other and to Host via bridge default.
C3 can't communicate to C1 and C2 but can communicate to Host via bridge netl 
Containers can communicate by IP address & also resolve a container name to an IP address. 
This capability called automatic service discovery.

*****************************************

Networking Commands

docker network ls 
- It is used to list all networks. bridge is the default network.

docker network inspect bridge 
â€“ It is used to inspect bridge network to see what containers are connected to it.

docker network create --driver bridge network_name 
- It is used to create user-defined bridge network.

docker network inspect network_name 
â€“ It is used to inspect network.

docker run --name container_name -itd --network network_name alpine 
- It is used to connect a container to a specified network e.g. host, user-defined bridge.

docker network connect container_name network_name 
- It is used to connect a running container to an existing user-defined bridge.

â€¢ docker network disconnect container_name network_name 
â€“ It is used to disconnect a running container to an existing user-defined bridge.

docker network rm network_name 
â€“ It is used delete specified network.


**********************************************************************************
Practical:

alpine
A minimal Docker image based on Alpine Linux with a complete package index and only 5 MB in size!

$ docker pull alpine

$ docker network ls
NETWORK ID     NAME      DRIVER    SCOPE
6ed0a8e10ade   bridge    bridge    local
c39746358760   host      host      local
cfb47357c8f6   none      null      local

$ docker network inspect bridge

$ docker images
REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
alpine       latest    324bc02ae123   4 weeks ago   7.8MB

***************************************************************
Deafult bridge network: 

$ docker run --name c1 -it -d alpine ash
c4b16951dda620765760da9319fa1de1db6697051ef339b3557c776223312433

$ docker run --name c2 -it -d alpine ash
6032846dc800bcefa27eac287f45c0fba64300b2a78b99a7e3a3272ef63e90e5

This will container two containers c1 and c2 from alpine image with ash (like bin/bash) terminal.
By default this will attach to the bridge network. 

Inspect bridge network to check if c1 and c2 are attached to this bridge network.
$ docker network inspect bridge
[
    {
        "Name": "bridge",
        ....
        "Containers": {
            "6032846dc800bcefa27eac287f45c0fba64300b2a78b99a7e3a3272ef63e90e5": {
                "Name": "c2",
                "EndpointID": "9becc7aaa7897b093ada3ee63984f0f92d1708392004f7bcc1772abf52783269",
                "MacAddress": "02:42:ac:11:00:03",
                "IPv4Address": "172.17.0.3/16",
                "IPv6Address": ""
            },
            "c4b16951dda620765760da9319fa1de1db6697051ef339b3557c776223312433": {
                "Name": "c1",
                "EndpointID": "03dfcabae02fc86af501bf290189bc8ee395589738e663d009af7ba06fd4ba06",
                "MacAddress": "02:42:ac:11:00:02",
                "IPv4Address": "172.17.0.2/16",
                "IPv6Address": ""
            }
        },
        ...
    }
]

*********************

Now attch to container c1

$ docker attach c1

# ip addr show
17: eth0@if18: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue state UP 
    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0
       valid_lft forever preferred_lft forever

As c1 is connected with bridge network that can communicate with host network, and can use same host network:
# ping -c 5 google.com

C1 container can also communicate with c2 container by its ip address ( not with container name ) :
# ping -c 5 172.17.0.3
PING 172.17.0.3 (172.17.0.3): 56 data bytes
64 bytes from 172.17.0.3: seq=0 ttl=64 time=0.197 ms
64 bytes from 172.17.0.3: seq=1 ttl=64 time=0.186 ms
64 bytes from 172.17.0.3: seq=2 ttl=64 time=0.138 ms
64 bytes from 172.17.0.3: seq=3 ttl=64 time=0.144 ms
64 bytes from 172.17.0.3: seq=4 ttl=64 time=0.138 ms

--- 172.17.0.3 ping statistics ---
5 packets transmitted, 5 packets received, 0% packet loss
round-trip min/avg/max = 0.138/0.160/0.197 ms

***************************************************************

Create custom bridge network and attach container to it:

$ docker network create --driver bridge net1 
992d54ab36ee37d6239d0ef48119f734383f2c242e706b91c9227593a03458cf

Attach container c3 of alpine image with our network `net1`
$ docker run --name c3 -itd --network net1 alpine ash
fb6d75fe2de3b7b2e9ae05d6cb994f8fbf1d5b396cff86ea81d8ab03ab82491d

$ docker run --name c4 -itd --network net1 alpine ash
ecc965c0d10eae20b597e1481b58333690ceec9a245563efba2ce9eb22bcef2a


Inspect bridge network to check if c3 and c4 are attached to this custom bridge network.
$ docker network inspect net1
[
    {
        "Name": "net1",
        ...,
        "Containers": {
            "ecc965c0d10eae20b597e1481b58333690ceec9a245563efba2ce9eb22bcef2a": {
                "Name": "c4",
                "EndpointID": "7b3cf23b1dd0be35e06193d4e9c2742741bd933b2eff3f25ef55778e277c8a01",
                "MacAddress": "02:42:ac:12:00:03",
                "IPv4Address": "172.18.0.3/16",
                "IPv6Address": ""
            },
            "fb6d75fe2de3b7b2e9ae05d6cb994f8fbf1d5b396cff86ea81d8ab03ab82491d": {
                "Name": "c3",
                "EndpointID": "0e40aca017df6326806a3e2ed31e8e5f43b3fccce2be7fe77fc9f7db5bddd0a0",
                "MacAddress": "02:42:ac:12:00:02",
                "IPv4Address": "172.18.0.2/16",
                "IPv6Address": ""
            }
        },
        ...
    }
]


*********************

Now attch to container c3

$ docker attach c3

# ip addr show
24: eth0@if25: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue state UP 
    link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff
    inet 172.18.0.2/16 brd 172.18.255.255 scope global eth0
       valid_lft forever preferred_lft forever


C3 container can also communicate with c4 container by its ip address or by name:

# ping -c 5 172.18.0.3

PING 172.18.0.3 (172.18.0.3): 56 data bytes
64 bytes from 172.18.0.3: seq=0 ttl=64 time=0.233 ms
64 bytes from 172.18.0.3: seq=1 ttl=64 time=0.136 ms
64 bytes from 172.18.0.3: seq=2 ttl=64 time=0.133 ms
64 bytes from 172.18.0.3: seq=3 ttl=64 time=0.139 ms
64 bytes from 172.18.0.3: seq=4 ttl=64 time=0.139 ms

--- 172.18.0.3 ping statistics ---
5 packets transmitted, 5 packets received, 0% packet loss
round-trip min/avg/max = 0.133/0.156/0.233 ms


# ping -c 5 c4

PING c4 (172.18.0.3): 56 data bytes
64 bytes from 172.18.0.3: seq=0 ttl=64 time=0.123 ms
64 bytes from 172.18.0.3: seq=1 ttl=64 time=0.139 ms
64 bytes from 172.18.0.3: seq=2 ttl=64 time=0.137 ms
64 bytes from 172.18.0.3: seq=3 ttl=64 time=0.175 ms
64 bytes from 172.18.0.3: seq=4 ttl=64 time=0.141 ms

--- c4 ping statistics ---
5 packets transmitted, 5 packets received, 0% packet loss
round-trip min/avg/max = 0.123/0.143/0.175 ms

Summary:

containers c1 and c2 are attached with default bridge network and 
containers c3 and c4 are attached with our custom bridge network (net1).

C1 and C2 can communicate with each other by their ip address only.
C3 and C4 can communicate with each other by their ip address or by name.

Both these bridges are isolated from each other and cannot communicate with each other.


======================================================================================
Docker Compose
======================================================================================

$ docker compose version
$ docker compose --help

Docker Compose:


### Docker Compose  
* Compose is a tool for defining and running multi-container Docker applications. 
* With Compose, you use a YAML file to configure your application's services. Then, with a single command, you create and start all the services from your configuration. 
* Compose works in all environments: production, staging, development, testing, as well as CI workflows.

*******************************

**Docker Desktop** includes Docker Compose along with Docker Engine and Docker CLI, which are Compose prerequisites.

#### Following are the use cases of Docker Compose:
- Development environments
- Automated testing environments
- Single host deployments

*******************************

### Docker Compose Key Features
- Have multiple isolated environments on a single host.
- Preserves volume data when containers are created.
- Only recreates containers that have changed.
- Supports variables and moving a composition between environments.

*******************************

### Example of `docker-compose.yml`
```yaml
services:
  web:
    image: "nginx"
  redis:
    image: "redis:6.0-alpine3.18"
```

*******************************

### Commands
- **`docker compose --help`**  
  This command is used to see other available commands.

- **`docker compose up`**  
  This command will take the `docker-compose.yml` file and start building containers. It will download/pull required images and create/start the necessary containers. If we modify the `docker-compose.yml` file and run `docker compose up` again, it will only recreate modified containers.

- **`docker compose up -d`**  
  Same as `docker compose up` but runs in the background, which means it won't occupy the terminal.

- **`docker compose ps`**  
  This command is used to list currently running services.

- **`docker compose exec service_name mysql -u root -p`**  
  This command is used to access the terminal of a container.

- **`docker compose stop`**  
  This command is used to stop services started using `docker compose up -d`.


======================================================================================


======================================================================================

======================================================================================


======================================================================================


======================================================================================


======================================================================================


======================================================================================

======================================================================================


======================================================================================


======================================================================================


======================================================================================


======================================================================================

======================================================================================


======================================================================================


======================================================================================


======================================================================================


======================================================================================

======================================================================================


======================================================================================


======================================================================================


======================================================================================


======================================================================================

======================================================================================


======================================================================================


======================================================================================


======================================================================================


======================================================================================

